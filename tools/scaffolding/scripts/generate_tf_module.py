"""This scripts generates boiler plates for using Terraform files. Input: Template files, Output: Terraform module."""
import json
from string import Template
import re

import argparse

parser = argparse.ArgumentParser(
                    prog='Terraform Module Generator',
                    description='This scripts generates boiler plates for using Terraform files. Input: Template files, Output: Terraform module.',
                    epilog='.')
parser.add_argument('--source-tf-doc', type=str, required=True, help='The json file generated by terraform-docs tool.')
parser.add_argument('--temp-work-folder', type=str, required=True, help='The temporary folder to store the intermediate files.')
parser.add_argument('--tf-module-template', type=str, required=True, help='The template file for the terraform module.')
parser.add_argument('--tf-output-path', type=str, required=True, help='The output path for the terraform module.')
args = parser.parse_args()

source_doc = args.source_tf_doc
work_folder = args.temp_work_folder
tf_template = args.tf_module_template
output_folder = args.tf_output_path

with open(source_doc, "r", encoding='UTF-8') as f:
    lines = f.readlines()

with open(work_folder, "w", encoding='UTF-8') as f:
    for line in lines:
        if not(line.strip("\n") == "<!-- BEGIN_TF_DOCS -->" or line.strip("\n") == "<!-- END_TF_DOCS -->"):
            f.write(line)
inputList = []
outputList = []
outputTemplate = """output "$out_name" {
  description = "$output_description"
  value       = try(module.db_instance_example.$out_value, null)
}"""

with open(work_folder, "r") as f: # TODO: source="" should load the latest release!
    data = json.load(f)
    for i in data['inputs']:
        if i['name'].startswith('is_'): # Support to show toggles
            extractedFeature = re.search('(?<=is_)(.*?)(?=_)', i['name'])
            if extractedFeature:
                desc = i['description']
                inputList.append("")
                for line in desc.splitlines():
                    inputList.append('# ' + line)
                feature = extractedFeature.group(0)
                if i['required'] == False:
                    if i['type'] == 'bool':
                        paramVal = i['default']
                        inputList.append(i['name'] + ' = ' + str(paramVal).lower())
        elif i['required'] == True:
            desc = i['description']
            inputList.append("")
            for line in desc.splitlines():
                inputList.append('# ' + line)
            inputList.append(i['name'] + ' = "example"')
    for y in data['outputs']:
        outputSub = {
            'out_name': y['name'],
            'output_description': y['description'],
            'out_value': y['name'],
        }
        outputList.append(Template(outputTemplate).substitute(outputSub))

vars_sub = {
    'inputs': '\n'.join(inputList),
    'outputs': '\n'.join(outputList),
}

with open(tf_template, 'r', encoding='UTF-8') as f:
    src = Template(f.read())
    result = src.substitute(vars_sub)

with open(output_folder, "w", encoding='UTF-8') as f:
    f.write(result)
